# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FootprintDialog
                                 A QGIS plugin
 This plugin manage the footprint of aerial imagery 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-11-28
        git sha              : $Format:%H$
        copyright            : (C) 2019 by GISCAN
        email                : contact@giscan.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtWidgets import QDialog, QDialogButtonBox
from qgis.core import QgsMapLayerProxyModel, Qgis, QgsMessageLog
from qgis.gui import QgsMapLayerComboBox, QgsFileWidget
from footprint.utilities.resources import get_ui_class
from footprint.process import count_overlap_action

FORM_CLASS = get_ui_class('overlap_dialog_base.ui')


class OverlapDialog(QDialog, FORM_CLASS):
    def __init__(self, parent=None, iface=None):
        """Constructor."""
        super(OverlapDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        QDialog.__init__(self, parent)
        self.parent = parent
        self.iface = iface
        self.setupUi(self)

        # layer
        self.layer = QgsMapLayerComboBox(parent)
        self.layer.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        # self.layer.layerChanged.connect(self.check_form_validation)

        # output
        self.result.setStorageMode(storageMode=QgsFileWidget.SaveFile)
        self.result.setDialogTitle("Save File")

        # Set up things for ok button
        self.ok_button = self.button_ovelap.button(QDialogButtonBox.Ok)
        # self.ok_button.setEnabled(False)
        self.ok_button.clicked.connect(self.accept)

        # Set up things for cancel button
        self.cancel_button = self.button_ovelap.button(QDialogButtonBox.Cancel)
        self.cancel_button.clicked.connect(self.reject)

    def check_form_validation(self):
        """Slot for in form modif"""

        input_layer = self.layer.currentLayer()
        if input_layer is None:
            self.ok_button.setEnabled(True)
        else:
            self.ok_button.setEnabled(False)

    def accept(self):
        """Method invoked when OK button is clicked."""

        input_layer = self.layer.currentLayer()
        out = self.result.filePath()
        file_out = QgsFileWidget.splitFilePaths(out)
        count_overlap_action(input_layer, out)
        QgsMessageLog.logMessage("Input layer: {} and Output: {}".format(input_layer.name(), file_out),
                                 'Footprint',
                                 Qgis.Info
                                 )
        self.close()
